<?xml version="1.0" encoding="utf-8"?>
<!-- Read this before creating packages: https://chocolatey.org/docs/create-packages -->
<!-- It is especially important to read the above link to understand additional requirements when publishing packages to the community feed aka dot org (https://chocolatey.org/packages). -->

<!-- Test your packages in a test environment: https://github.com/chocolatey/chocolatey-test-environment -->

<!--
This is a nuspec. It mostly adheres to https://docs.nuget.org/create/Nuspec-Reference. Chocolatey uses a special version of NuGet.Core that allows us to do more than was initially possible. As such there are certain things to be aware of:

* the package xmlns schema url may cause issues with nuget.exe
* Any of the following elements can ONLY be used by choco tools - projectSourceUrl, docsUrl, mailingListUrl, bugTrackerUrl, packageSourceUrl, provides, conflicts, replaces 
* nuget.exe can still install packages with those elements but they are ignored. Any authoring tools or commands will error on those elements 
-->

<!-- You can embed software files directly into packages, as long as you are not bound by distribution rights. -->
<!-- * If you are an organization making private packages, you probably have no issues here -->
<!-- * If you are releasing to the community feed, you need to consider distribution rights. -->
<!-- Do not remove this test for UTF-8: if “Ω” doesn’t appear as greek uppercase omega letter enclosed in quotation marks, you should use an editor that supports UTF-8, not this one. -->
<package xmlns="http://schemas.microsoft.com/packaging/2015/06/nuspec.xsd">
  <metadata>
    <!-- == PACKAGE SPECIFIC SECTION == -->
    <!-- This section is about this package, although id and version have ties back to the software -->
    <!-- id is lowercase and if you want a good separator for words, use '-', not '.'. Dots are only acceptable as suffixes for certain types of packages, e.g. .install, .portable, .extension, .template -->
    <!-- If the software is cross-platform, attempt to use the same id as the debian/rpm package(s) if possible. -->
    <id>ukinternationalkeyboard</id>
    <!-- version should MATCH as closely as possible with the underlying software -->
    <!-- Is the version a prerelease of a version? https://docs.nuget.org/create/versioning#creating-prerelease-packages -->
    <!-- Note that unstable versions like 0.0.1 can be considered a released version, but it's possible that one can release a 0.0.1-beta before you release a 0.0.1 version. If the version number is final, that is considered a released version and not a prerelease. -->
    <version>2.0.0</version>
    <packageSourceUrl>https://github.com/mfschumann/chocolatey-packages/tree/master/ukinternationalkeyboard</packageSourceUrl>

    <owners>Martin F. Schumann</owners>
    <!-- ============================== -->

    <!-- == SOFTWARE SPECIFIC SECTION == -->
    <!-- This section is about the software itself -->
    <title>UK International Keyboard</title>
    <authors>James Campbell</authors>
    <!-- projectUrl is required for the community feed -->
    <projectUrl>http://zolid.com/uk-intl-kb/index.htm</projectUrl>
    <iconUrl>https://cdn.jsdelivr.net/gh/mfschumann/chocolatey-packages@66324faf67cc68bd3f87e7815c126a03917c4d35/ukinternationalkeyboard/ukinternationalkeyboard.png</iconUrl>
    <copyright>1996-2016 James Campbell</copyright>
    <!-- If there is a license Url available, it is is required for the community feed -->
    <licenseUrl>http://zolid.com/uk-intl-kb/index.htm</licenseUrl>
    <requireLicenseAcceptance>false</requireLicenseAcceptance>
    <!--<projectSourceUrl>Software Source Location - is the software FOSS somewhere? Link to it with this</projectSourceUrl>-->
    <docsUrl>http://zolid.com/uk-intl-kb/index.htm</docsUrl>
    <!--<mailingListUrl></mailingListUrl>-->
    <!--<bugTrackerUrl></bugTrackerUrl>-->
    <tags>keyboard layout uk</tags>
    <summary>UK-based keyboard layout with support for many symbols / accents</summary>
    <description>Still trying to remember ALT codes for accented characters, or using Character Map to insert symbols? There is an easier way...

If you frequently work with foreign languages, you may well find it awkward to type accented characters, symbols or other characters not represented on the standard UK keyboard. This was a problem I also had, until I was introduced to the Windows "United States International keyboard", which is a keyboard layout you can install in Windows that enables you to easily type the accented characters used in major European languages, using the AltGr key on the keyboard to access the additional characters. The problem with the US International keyboard is that, as its name implies, it is based on the US keyboard and therefore double-quote, at sign, hash sign and so on are in the wrong place.

Fortunately, there is a little-known Microsoft utility called the Microsoft Keyboard Layout Creator, which is ideal for inveterate fiddlers like me. I've used it to put together a UK International keyboard, based on the UK keyboard layout but using the principles of the US International keyboard (retaining, in most cases, the established positioning of the various accented characters and symbols). I have also extended the layout to include more symbols (typically, stuff that I, as a translator and editor, need to be able to type from time to time, but also anything else I thought might be helpful to other users) and to cover more languages.

Although the emphasis is on Western European languages, from version 2.0 onwards the keyboard also supports all European languages written in the Latin alphabet with many new letters and accents, and it now supports combining accent marks so in theory hundreds of combinations are now available. (Version 2.0 no longer supports superscript-1 or open bullet, but dagger and double dagger have been added.)
</description>
    <releaseNotes>
</releaseNotes>
    <!-- =============================== -->      

    <!-- Specifying dependencies and version ranges? https://docs.nuget.org/create/versioning#specifying-version-ranges-in-.nuspec-files -->
    <!--<dependencies>
      <dependency id="" version="__MINIMUM_VERSION__" />
      <dependency id="" version="[__EXACT_VERSION__]" />
      <dependency id="" version="[_MIN_VERSION_INCLUSIVE, MAX_VERSION_INCLUSIVE]" />
      <dependency id="" version="[_MIN_VERSION_INCLUSIVE, MAX_VERSION_EXCLUSIVE)" />
      <dependency id="" />
      <dependency id="chocolatey-uninstall.extension" />
    </dependencies>-->
    <!-- chocolatey-uninstall.extension - If supporting 0.9.9.x (or below) and including a chocolateyUninstall.ps1 file to uninstall an EXE/MSI, you probably want to include chocolatey-uninstall.extension as a dependency. Please verify whether you are using a helper function from that package. -->

    <!--<provides>NOT YET IMPLEMENTED</provides>-->
    <!--<conflicts>NOT YET IMPLEMENTED</conflicts>-->
    <!--<replaces>NOT YET IMPLEMENTED</replaces>-->
  </metadata>
  <files>
    <!-- this section controls what actually gets packaged into the Chocolatey package -->
    <file src="tools\**" target="tools" />
    <!--Building from Linux? You may need this instead: <file src="tools/**" target="tools" />-->
  </files>
</package>
